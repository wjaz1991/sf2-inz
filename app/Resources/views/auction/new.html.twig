{% extends "::base.html.twig" %}

{% block javascripts %}
    {{ parent() }}
    
    {% javascripts 'js/dropzone/*' %}
        <script src="{{ asset_url }}"></script>
    {% endjavascripts %}
    
    <script>
    $(function() {
        /*Dropzone.options.dropzoneform = { // The camelized version of the ID of the form element
            // The configuration we've talked about above
            autoProcessQueue: false,
            uploadMultiple: true,
            parallelUploads: 100,
            maxFiles: 100,

            // The setting up of the dropzone
            init: function() {
              var myDropzone = this;

              // First change the button to actually tell Dropzone to process the queue.
              this.element.querySelector("button[type=submit]").addEventListener("click", function(e) {
                // Make sure that the form isn't actually being sent.
                e.preventDefault();
                e.stopPropagation();
                myDropzone.processQueue();
              });

              // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
              // of the sending event because uploadMultiple is set to true.
              this.on("sendingmultiple", function() {
                // Gets triggered when the form is actually being sent.
                // Hide the success button or the complete form.
              });
              this.on("successmultiple", function(files, response) {
                // Gets triggered when the files have successfully been sent.
                // Redirect user or notify of success.
              });
              this.on("errormultiple", function(files, response) {
                // Gets triggered when there was an error sending the files.
                // Maybe show form again, and notify user of error
              });
            }

          }*/
        var imagesCount = '{{ form.images|length }}';
        
        $("#image-add").on('click', function() {
            var imageList = $("#images-list");
            
            var newWidget = imageList.attr('data-prototype');
            
            newWidget = newWidget.replace(/__name__/g, imagesCount);
            imagesCount++;
            var newEl = $('<p></p>').html(newWidget);
            imageList.append(newEl);
        });
    });
    </script>
{% endblock %}

{% block body %}
    <div class="col-md-8 col-md-offset-2">
        <h1 class="text-center">Add new offer</h1>
        <form action="{{ path('auction_new') }}" novalidate action="" method="post" {{ form_enctype(form) }}>
            {{ form_row(form.title) }}
            {{ form_row(form.description) }}
            {{ form_row(form.price) }}
            {{ form_row(form.category) }}
            {{ form_row(form.private) }}
            {{ form_row(form.startDate) }}
            {{ form_row(form.endDate) }}
            <div id="images-list" data-prototype="{{ form_widget(form.images.vars.prototype)|e }}">
            {% for image in form.images %}
                {{ form_widget(image) }}
                {{ form_errors(image) }}
            {% endfor %}
            </div>
            {{ form_errors(form) }}
            {{ form_rest(form) }}
            <button type="button" class="btn btn-success" id="image-add">Add image</button><br><br>
            <button type="submit" class="btn btn-default">Add auction</button>
        </form>
    </div>
        
        
{% endblock %}

